#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        vector<int> merged_arr;
        int n1 = nums1.size();
        int n2 = nums2.size();
        int i = 0, j = 0;
        
        // Merge the two sorted arrays
        while (i < n1 && j < n2) {
            if (nums1[i] < nums2[j]) {
                merged_arr.push_back(nums1[i]);
                i++;
            } else {
                merged_arr.push_back(nums2[j]);
                j++;
            }
        }
        
        // Add remaining elements of nums1
        while (i < n1) {
            merged_arr.push_back(nums1[i]);
            i++;
        }
        
        // Add remaining elements of nums2
        while (j < n2) {
            merged_arr.push_back(nums2[j]);
            j++;
        }
        
        // Find the median
        int m = merged_arr.size();
        double median;
        
        if (m % 2 == 0) {
            // If even, median is the average of the two middle elements
            median = (merged_arr[m / 2] + merged_arr[(m / 2) - 1]) / 2.0;
        } else {
            // If odd, median is the middle element
            median = merged_arr[m / 2];
        }
        
        return median;
    }
};

int main() {
    Solution sol;
    
    vector<int> nums1 = {1, 3, 5, 7};
    vector<int> nums2 = {2, 4, 6, 8, 9};
    
    double median = sol.findMedianSortedArrays(nums1, nums2);
    cout << "Median of the two sorted arrays: " << median << endl;

    return 0;
}
