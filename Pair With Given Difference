#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;

class Solution {
public: 
    vector<int> result(int n, vector<int> &arr, int target) {
        sort(arr.begin(), arr.end());  // Sort the array first
        int start = 0, end = 1;  // Initialize pointers
        
        while (end < n) {
            int diff = arr[end] - arr[start];  // Calculate the difference
            
            if (diff == target) {
                return {arr[start], arr[end]};  // Return the pair if the difference matches the target
            } 
            else if (diff < target) {
                end++;  // Increase `end` to increase the difference
            } 
            else {
                start++;  // Increase `start` to decrease the difference
            }
            
            // Ensure `start` doesn't catch up to `end`
            if (start == end) {
                end++;
            }
        }
        return {-1, -1};  // Return {-1, -1} if no such pair is found
    }
};

int main() {
    Solution sol;
    int n;
    
    cout << "Enter the size of the array: ";
    cin >> n;
    
    vector<int> arr(n);
    
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    
    int target;
    
    cout << "Enter the target subtraction: ";
    cin >> target;
    
    vector<int> ans = sol.result(n, arr, target);
    
    if (ans[0] != -1) {
        cout << "The elements whose subtraction is " << target << " are: " << ans[0] << " and " << ans[1] << endl;
    } 
    else {
        cout << "No such pair found." << endl;
    }
    
    return 0;
}
